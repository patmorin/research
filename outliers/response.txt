Reviewer 1:
Reviewer number 1 had only one suggestion that required a substantial
change and this was his third suggestion.  In response to this, we
have added a reference in Section 4.2.5 to an algorithm for
enumerating all binary trees with at most n vertices.



Reviewer 2:

Reviewer's Comment:
All the algorithms feel very much like an FPT-approach:  In Sections 2
and 3, you find problem kernels whose size depends only on c, and then
you run existing algorithms on this kernel.  The algorithm in Section
4 has a typical FPT-complexity (polynomial in n and exponential
in the parameter).  Algorithmically, however, it doesn't look like the
typical FPT-algorithm.  In any case, I think that this problem kernel
idea should be highlighted as the central algorithmic idea behind the
approaches in Sections 2 and 3. 

Authors' Response:
A paragraph has been added to Section 1.2 describing the relationship
between our algorithms and typical FPT techniques.


Reviewer's Comment:
Intro, first paragraph:  It would be nice if you could explain why
these particular functions f are interesting.  This may be
accomplished to some degree already by moving part of the first
paragraph of the Conclusions section here.

Authors' Response:
Further motivation has been added at the end of the first paragraph.


Reviewer's Comment:
P2L7:  Why do you point out the linear space bound for the Segal/Kedem
algorithm here?  What are the space bounds for the other algorithms? 

Authors' Response:
We have removed the mention of linear space to make this reference
consistent with the others.


Reviewer's Comment:
New Results, first two paragraphs:  The statement about the Omega(n3)
running time is incorrect, as the Segal/Kedem algorithm takes linear
time for k = n - O(1), which is arguably exactly the case you are
interested in.  You should sell, however, that your algorithm is an
improvement over Segal/Kedem whose running time is O(n (n - c)c2) in
your notation. 

Authors' Response:
We have corrected this oversight and mention the Kedem/Segal algorithm
as a explicit exception.


Reviewer's Comment:
Your proof of Theorem 3 proves an n log n lower bound if you allow
multisets of points.  Does the lower bound continue to hold if you
know in advance that all points are distinct? 

Authors' Response:
Yes, the lower bound does hold even if all input points are guaranteed
to be distinct.  This is due to an old result of Yao which shows that
Set-Equality has an Omega(n log n) lower bound (in the algebraic
decision tree model), even if the input sets are restricted to be
distinct integers.  By lifting the set A using the equation
(x,x^2+epsilon) for a sufficiently small epsilon we can show that A
and B are equal if and only if there is no point whose removal
decreases the convex hull area by more than some value delta that
depends on the choice of epsilon.

However, the details of this argument are standard, but tedious.  The
authors do not feel that adding these to the paper will improve it.

Reviewer's Comment:
P9L-12 - P9L-9:  This paragraph is incomprehensible.  I understand
that you want to fix a point as an "anchor", in order to get a
sequential order of the chunks of removed points; but you may want to
explain why picking one of p_{0,0} or p_{0,-1} does the trick.
Another thing that I am not entirely clear about is what happens if
|S_0| <= c and the optimal solution removes all points in S_0.  This
paragraph seems to suggest that in this case you fail to find the
optimal solution. 

Authors' Response:
The discussion of how to initialize the algorithm has been moved into
section 4.2.5 where it is now explained in greater detail, and more
clearly.

The authors have incorporated all of the second reviewers other minor
suggestions.
